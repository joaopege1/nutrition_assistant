# RCU App - Food Tracking Application

This application was developed to assist individuals with intestinal conditions, such as RCU and Crohn's disease, who need to relearn their dietary habits after diagnosis. It enables users to test their favorite foods to determine if they are safe for consumption. By maintaining lists of safe and unsafe foods, the app simplifies the creation of tailored meal plans and structured diets. This is my first complete personal project, built independently.

## Features

### Authentication
- Login: Secure JWT-based authentication system
- Registration: Create user or admin accounts
- Protected Routes: Role-based access control
- Logout: Secure session termination

### Food Entry Management
- Create: Add new food entries with fields:
  - Food name (string)
  - Quantity (integer)
  - Date (datetime, defaults to current date)
  - Safety status (is_safe: boolean, set at the end of the day)
- View: Display lists of food entries, separated into:
  - Safe foods (is_safe: true)
  - Unsafe foods (is_safe: false)
- Edit: Modify existing food entries
- Delete: Remove food entries
- Statistics: View total counts of safe and unsafe foods:
  - Overall totals
  - Totals within a specific time period (e.g., last 7 or 30 days)

### Health and Lifestyle Tracking
- Track additional health-related information:
  - Medication intake
  - Exercise activity
  - Alcohol consumption
  - Unusual food consumption
  - Symptoms experienced (with details)
- AI Agent (Planned): Suggest food safety based on web research
- Notifications: Notify users after 24 hours to confirm if a food is safe or unsafe

### Responsive Interface
- Mobile-first: Optimized for small screens (<= 480px)
- Tablet: Two-column layout (481px - 768px)
- Desktop: Full multi-column layout (>= 769px)
- Modern Design: Clean and intuitive UI

## Technologies Used

### Frontend
- React 19: Core framework
- TypeScript: Static typing
- React Router: Navigation
- Axios: HTTP requests
- Vite: Build tool
- Context API: State management

### Backend
- FastAPI: API framework
- SQLite: Database (auth.db for authentication)
- Python Libraries: Custom-built backend (no AI assistance)
- Render: Deployment platform

## Responsivity

- Mobile: Single-column layout, touch-friendly buttons
- Tablet: Hybrid two-column layout
- Desktop: Full-featured multi-column interface

## Installation and Setup

### Prerequisites
- Node.js 18+: For frontend
- Python 3.9+: For backend
- npm/yarn: For frontend dependencies
- FastAPI Backend: Running on http://localhost:8000

### Frontend Installation
```bash
cd frontend/my-react-app
npm install
```

### Frontend Development
```bash
npm run dev
```

### Frontend Production Build
```bash
npm run build
npm run preview
```

### Backend Setup
1. Ensure the SQLite database (auth.db) is initialized
2. Install backend dependencies:
```bash
pip install fastapi uvicorn sqlalchemy python-jose[cryptography] passlib[bcrypt]
```
3. Run the FastAPI server:
```bash
uvicorn main:app --host 0.0.0.0 --port 8000
```

## API Endpoints

### Authentication
- POST /auth/tokens: Login
- POST /auth/: Register user
- GET /users/: Get current user details

### Food Entries
- GET /foods/: List all food entries
- POST /food_entry/: Create a food entry
- PUT /food_entry/{id}: Update a food entry
- DELETE /food_entry/{id}: Delete a food entry

### Admin Endpoints
- GET /auth/admin/foods/: List all food entries (admin only)
- PUT /auth/admin/food_entry/{id}: Update food safety status (admin only)
- DELETE /auth/admin/food_entry/{id}: Delete food entry (admin only)

## User Roles

### Regular User
- View personal food entries
- View safe/unsafe food lists
- View basic statistics

### Administrator
- All regular user capabilities
- Create, edit, and delete food entries
- Update food safety status
- Access all food entries in the system

## Design System

### Colors
- Primary: #667eea (blue)
- Success: #28a745 (green)
- Danger: #dc3545 (red)
- Info: #17a2b8 (cyan)
- Neutral: #6c757d (gray)

### Typography
- Font: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto
- Sizes: 14px (mobile), 15px (tablet), 16px (desktop)

### Components
- Cards: Rounded borders, soft shadows
- Buttons: Hover, disabled, and loading states
- Forms: Real-time validation
- Tables: Horizontal scroll on mobile

## Security

- JWT Authentication: Token-based access
- Interceptors: Automatic token inclusion in requests
- Route Protection: Role-based access control
- Permission Levels: User vs. admin access

## Screen Features

### Login
- Authentication form
- Field validation
- Loading states
- Error handling

### Registration
- Full registration form
- User type selection
- Password validation
- Data confirmation

### Dashboard
- Real-time statistics
- Food entry table
- Contextual actions based on user role
- Modals for creating/editing entries

## Deployment

### Render (Recommended)
1. Push to GitHub:
```bash
git push origin main
```
2. In Render Dashboard:
   - Create a new Blueprint
   - Select your repository
   - Click "Apply" for automatic deployment

See RENDER_QUICKSTART.md for quick setup or DEPLOYMENT.md for detailed instructions.

### Manual Deployment
1. Build frontend:
```bash
npm run build
```
2. Serve files from the dist/ folder
3. Ensure the backend API is accessible

### Configuration Files
- render.yaml: Render deployment configuration
- config.py: Backend environment, CORS, and database settings
- frontend/my-react-app/src/config.ts: Frontend configuration

## Contributing

1. Fork the repository
2. Create a feature branch
3. Commit changes
4. Push to the branch
5. Open a Pull Request

## License

This project is licensed under the MIT License.

## Future Enhancements
- AI Agent: Implement an AI to suggest food safety based on web research
- Health Tracking: Add interfaces for medication, exercise, alcohol, and symptom tracking
- Notifications: Implement 24-hour food safety notifications

</xaiArtifact>