O que eu quero neste app:


(Done) Eu quero ser capaz de logar nele.
(Done) Eu quero poder cadastrar uma comida - endpoint do tipo post - com os seguintes campos:
    nome da comida (string)
    quantidade (int)
    data (datetime) - default: data atual
(Done) e ter a possibilidade de colocar o resultado dessa comida no fim do dia -- is_safe(bool)
(Done) entao no fim eu quero:
(Done)     gerar entao uma lista de comidas que tem is_safe: true e outra lista is_safe: false

(Done) Eu quero poder ver a lista de comidas que eu cadastrei, e ver se elas estao na lista safe ou nao.
(Done) Eu quero poder editar uma comida que eu cadastrei.
(Done) Eu quero poder deletar uma comida que eu cadastrei.
(Done)Eu quero poder ver o total de comidas safe e nao safe que eu cadastrei.
Eu quero poder ver o total de comidas safe e nao safe que eu cadastrei em um periodo de tempo (ex: ultimos 7 dias, ultimos 30 dias)

Talvez eu possa fazer um agente IA que me ajude a decidir se uma comida √© safe ou nao, baseado em pesquisas na internet.
quero colocar informa√ßoes se tomei remedio, se fiz exercicio, se bebi alcool, se comi algo diferente do normal.
quero colocar informa√ßoes se tive algum sintoma, e quais foram esses sintomas.


sqlite3 auth.db

Implementar uma forma de notificar o usuario a dizer se a comida √© safe ou nao apos 24h.

# RCU App - Frontend

Uma aplica√ß√£o React moderna e responsiva para gerenciamento de entradas de comida, conectada com uma API FastAPI.

## üöÄ Funcionalidades

### Autentica√ß√£o
- **Login**: Sistema de autentica√ß√£o com JWT
- **Cadastro**: Cria√ß√£o de contas de usu√°rio e administrador
- **Prote√ß√£o de rotas**: Acesso controlado baseado em autentica√ß√£o
- **Logout**: Encerramento seguro de sess√£o

### Gerenciamento de Entradas
- **Visualiza√ß√£o**: Lista todas as entradas de comida
- **Cria√ß√£o**: Adicionar novas entradas (apenas admins)
- **Edi√ß√£o**: Modificar entradas existentes (apenas admins)
- **Exclus√£o**: Remover entradas (apenas admins)
- **Controle de seguran√ßa**: Marcar entradas como seguras/inseguras (apenas admins)

### Interface Responsiva
- **Mobile-first**: Otimizado para dispositivos m√≥veis
- **Tablet**: Layout adaptado para tablets
- **Desktop**: Interface completa para desktop
- **Design moderno**: Interface limpa e intuitiva

## üõ†Ô∏è Tecnologias Utilizadas

- **React 19** - Framework principal
- **TypeScript** - Tipagem est√°tica
- **React Router** - Navega√ß√£o
- **Axios** - Cliente HTTP
- **Vite** - Build tool
- **Context API** - Gerenciamento de estado

## üì± Responsividade

A aplica√ß√£o √© totalmente responsiva e se adapta a diferentes tamanhos de tela:

- **Mobile** (‚â§ 480px): Layout em coluna √∫nica, bot√µes maiores para touch
- **Tablet** (481px - 768px): Layout h√≠brido com 2 colunas
- **Desktop** (‚â• 769px): Layout completo com m√∫ltiplas colunas

## üîß Instala√ß√£o e Execu√ß√£o

### Pr√©-requisitos
- Node.js 18+ 
- npm ou yarn
- Backend FastAPI rodando na porta 8000

### Instala√ß√£o
```bash
npm install
```

### Desenvolvimento
```bash
npm run dev
```

### Build para produ√ß√£o
```bash
npm run build
```

### Preview da build
```bash
npm run preview
```

## üîó Conex√£o com Backend

A aplica√ß√£o se conecta com os seguintes endpoints do FastAPI:

### Autentica√ß√£o
- `POST /auth/tokens` - Login
- `POST /auth/` - Cadastro
- `GET /users/` - Dados do usu√°rio atual

### Entradas de Comida
- `GET /foods/` - Listar entradas
- `POST /food_entry/` - Criar entrada
- `PUT /food_entry/{id}` - Atualizar entrada
- `DELETE /food_entry/{id}` - Deletar entrada

### Admin (apenas para administradores)
- `GET /auth/admin/foods/` - Todas as entradas
- `PUT /auth/admin/food_entry/{id}` - Atualizar seguran√ßa
- `DELETE /auth/admin/food_entry/{id}` - Deletar entrada

## üë• Tipos de Usu√°rio

### Usu√°rio Comum
- Visualizar entradas de comida
- Ver estat√≠sticas b√°sicas

### Administrador
- Todas as funcionalidades do usu√°rio comum
- Criar, editar e deletar entradas
- Controlar status de seguran√ßa das entradas
- Acesso a todas as entradas do sistema

## üé® Design System

### Cores
- **Prim√°ria**: #667eea (azul)
- **Sucesso**: #28a745 (verde)
- **Perigo**: #dc3545 (vermelho)
- **Info**: #17a2b8 (ciano)
- **Neutro**: #6c757d (cinza)

### Tipografia
- **Fonte**: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto
- **Tamanhos responsivos**: 14px (mobile), 15px (tablet), 16px (desktop)

### Componentes
- **Cards**: Bordas arredondadas, sombras suaves
- **Bot√µes**: Estados hover, disabled, loading
- **Formul√°rios**: Valida√ß√£o em tempo real
- **Tabelas**: Scroll horizontal em mobile

## üîí Seguran√ßa

- **JWT Tokens**: Autentica√ß√£o baseada em tokens
- **Interceptors**: Inclus√£o autom√°tica de tokens nas requisi√ß√µes
- **Prote√ß√£o de rotas**: Verifica√ß√£o de autentica√ß√£o
- **Controle de acesso**: Diferentes permiss√µes por tipo de usu√°rio

## üìä Funcionalidades por Tela

### Login
- Formul√°rio de autentica√ß√£o
- Valida√ß√£o de campos
- Estados de loading
- Tratamento de erros

### Cadastro
- Formul√°rio completo de registro
- Sele√ß√£o de tipo de usu√°rio
- Valida√ß√£o de senhas
- Confirma√ß√£o de dados

### Dashboard
- Estat√≠sticas em tempo real
- Lista de entradas em tabela
- A√ß√µes contextuais por tipo de usu√°rio
- Modais para cria√ß√£o/edi√ß√£o

## üöÄ Deploy

Para fazer deploy da aplica√ß√£o:

1. Execute o build: `npm run build`
2. Os arquivos est√°ticos estar√£o na pasta `dist/`
3. Configure seu servidor web para servir os arquivos da pasta `dist/`
4. Certifique-se de que a API backend esteja acess√≠vel

## ü§ù Contribui√ß√£o

1. Fa√ßa um fork do projeto
2. Crie uma branch para sua feature
3. Commit suas mudan√ßas
4. Push para a branch
5. Abra um Pull Request

## üìù Licen√ßa

Este projeto est√° sob a licen√ßa MIT.